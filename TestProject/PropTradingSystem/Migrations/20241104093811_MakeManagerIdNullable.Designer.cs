// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropTradingSystem.Models;

#nullable disable

namespace PropTradingSystem.Migrations
{
    [DbContext(typeof(PropTradingContext))]
    [Migration("20241104093811_MakeManagerIdNullable")]
    partial class MakeManagerIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropTradingSystem.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxRiskPerTrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TraderId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxDrawdown")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TargetProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TraderId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProfitOrLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("PropTradingSystem.Models.ProfitShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("CompanyProfitPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TraderProfitPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("ProfitShares");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("RiskSummaryId")
                        .HasColumnType("int");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RiskSummaryId");

                    b.HasIndex("TraderId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("PropTradingSystem.Models.RiskManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxDailyLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxOverallLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxPositionSize")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("RiskManagements");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Trader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Account", b =>
                {
                    b.HasOne("PropTradingSystem.Models.Trader", "Trader")
                        .WithMany("Accounts")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Challenge", b =>
                {
                    b.HasOne("PropTradingSystem.Models.Trader", "Trader")
                        .WithMany("Challenges")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Performance", b =>
                {
                    b.HasOne("PropTradingSystem.Models.Account", "Account")
                        .WithMany("PerformanceRecords")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PropTradingSystem.Models.ProfitShare", b =>
                {
                    b.HasOne("PropTradingSystem.Models.Account", "Account")
                        .WithOne("ProfitShare")
                        .HasForeignKey("PropTradingSystem.Models.ProfitShare", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Report", b =>
                {
                    b.HasOne("PropTradingSystem.Models.Admin", "Admin")
                        .WithMany("Reports")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropTradingSystem.Models.Manager", "Manager")
                        .WithMany("ReviewedReports")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PropTradingSystem.Models.RiskManagement", "RiskSummary")
                        .WithMany()
                        .HasForeignKey("RiskSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropTradingSystem.Models.Trader", "Trader")
                        .WithMany()
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Manager");

                    b.Navigation("RiskSummary");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("PropTradingSystem.Models.RiskManagement", b =>
                {
                    b.HasOne("PropTradingSystem.Models.Account", "Account")
                        .WithOne("RiskManagementPolicy")
                        .HasForeignKey("PropTradingSystem.Models.RiskManagement", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Account", b =>
                {
                    b.Navigation("PerformanceRecords");

                    b.Navigation("ProfitShare")
                        .IsRequired();

                    b.Navigation("RiskManagementPolicy")
                        .IsRequired();
                });

            modelBuilder.Entity("PropTradingSystem.Models.Admin", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Manager", b =>
                {
                    b.Navigation("ReviewedReports");
                });

            modelBuilder.Entity("PropTradingSystem.Models.Trader", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Challenges");
                });
#pragma warning restore 612, 618
        }
    }
}
